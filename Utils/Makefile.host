# Template for Makefiles, follow directions scattered throughout
# in the comments for the specific subdirectory

# This directory's location relative to the project root (do not end with '/')
RELATIVE=..

# This directory's name + parents inside of PROJECT_ROOT (ex. if this is ${PROJECT_ROOT}/libA/module1, then ME=libA/module1)
ME=Utils

ARCH=host

# location of makeinclude in the top-level source directory
include ${RELATIVE}/common/makeinclude.${ARCH}

# name of output library
TYPE = lib
TARGET = Utils
OUTPUT = lib${TARGET}.a

# List all source-headers pairs with a .o extension (i.e. Class.cpp Class.h --> Class.o)
OBJS = \
	FloatEquals.o \
	Color.o \
	Angle.o \
	Degrees.o \
	Radians.o \
	AngleOps.o \
	Distance.o \
	Feet.o \
	Inches.o \
	DistanceOps.o \
	TimeStamp.o \
	Packable.o \
	NetClient.o \
	NetServer.o \
	SerialPeer.o

# List all Template class files with the .s extension
TEMPLATES = \

# List all directories where dependent headers are located
INCLUDES = ${SYS_INCLUDES} \
	-I../ \
	-I${RELATIVE}/${ARCH}/${BUILD_VERSION}/include

# List all directories and library names where dependent libraries
# are located
# Do _not_ link against other libraries when making a static library

##########    If all variables above are correctly filled out,
##########    nothing below should have to be changed.

${TARGET}: ${TEMPLATES} ${OBJS}
	@echo Linking ${TARGET} ...
	${AR} rcs ${OUTPUT} ${OBJS}
	mkdir -p ${RELATIVE}/${ARCH}/${BUILD_VERSION}/{bin,lib,include}
	mkdir -p ${RELATIVE}/${ARCH}/${BUILD_VERSION}/include/${ME}
	${INSTALL} ${OUTPUT} ${RELATIVE}/${ARCH}/${BUILD_VERSION}/${TYPE}
	${INSTALL} *.hpp ${RELATIVE}/${ARCH}/${BUILD_VERSION}/include/${ME}
	@echo

%.o: %.cpp %.hpp
	@echo Compiling $< ... $@
	${CXX} -c ${CXXFLAGS} $< -o $@ ${INCLUDES}
	@echo

%.s: %.h
	@echo Checking syntax of template $< ...
	${CXX} -c ${CXXFLAGS} $< -o $@ ${INCLUDES}
	@echo

clean:
	@echo Cleaning up objects...
	rm -f ${OBJS} 
	@echo Cleaning up precomiled templates...
	rm -f ${TEMPLATES}
	@echo Removing temporary files and core dumps...
	rm -f *~ *core	

very_clean: clean
	@echo Removing ${TARGET}
	rm -f ${OUTPUT}
