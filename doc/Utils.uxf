<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <zoom_level>6</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>432</x>
      <y>252</y>
      <w>204</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>Utils::TimeStamp
--
year: unsigned int
month: TimeStamp::Month
calDay: unsigned int
weekDay: TimeStamp::Day
hour: unsigned int
minute: unsigned int
sec: unsigned int
--
+ update(void): void
+ read(asStr: std::string): void
+ write(void): std::string
--
Responsibilities
Set time information at creation, and update if
requested. Allows reading and writing to streams</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>168</x>
      <y>252</y>
      <w>234</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
Utils::Packable
--
_+ type: const unsigned int_
--
/+ pack(btyes: std::vector&lt;unsigned char&gt;&amp;): void/
/+ unpack(bytes: const vector&lt;unsigned char&gt;&amp;): void/
_# pack_int32(data: int, buf: unsigned char*): void_
_# pack_uint32(data: int, buf: unsigned char*): void_
_# pack_float32(data: int, buf: unsigned char*): void_
_# unpack_int32(data: int, buf: unsigned char*): void_
_# unpack_uint32(data: int, buf: unsigned char*): void_
_# unpack_float32(data: int, buf: unsigned char*): void_
--
Responsibilities
Classes derived from this interface support
packing into a byte stream for sending over
a network.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>30</x>
      <y>30</y>
      <w>300</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>Utils::NetClient
--
- m_isValid: bool
- m_fd: int
- m_targetIP: std::string
- m_portNo: unsigned short
--
+ connection_to_server(addr: std::string, portNo: unsigned short): bool
+ is_valid(void): bool
+ send(buf: std::vector&lt;unsigned char&gt;): bool
+ send(buf: const char*): bool
+ send(data: const Utils::Packable&amp;): bool
+ receive(buf: std::vector&lt;unsigned char&gt;&amp;): bool
+ receive(data: Utils::Packable&amp;): bool
--
Responsibilities
Open and verify an IP socket. Send and receive
data through this socket. Manages all connections opened
through this class so a connection may be shared.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>606</x>
      <y>456</y>
      <w>144</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Utils::Color
--
+ red: unsigned char
+ green: unsigned char
+ blue: unsigned char
--
+ asUint32(format: Utils::Color::Format): unsigned int
--
Responsibilities
Represents a 24-bit color.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>396</x>
      <y>486</y>
      <w>126</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
Utils::Angle
--
value: float
--
/+ set(value: Units::Angle&amp;)/
/+ asDegrees(): Units::Degrees/
/+ asRadians(): Units::Radians/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>366</x>
      <y>540</y>
      <w>108</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>96;18;18;60</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>444</x>
      <y>540</y>
      <w>96</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>18;18;84;60</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>468</x>
      <y>600</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Utils::Radians
--
--
+ asDegrees(): Units::Degrees
+ asRadians(): Units::Radians
+ getValue(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>318</x>
      <y>600</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Utils::Degrees
--
--
+ asDegrees(): Units::Degrees
+ asRadians(): Units::Radians
+ getValue(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>180</x>
      <y>600</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Utils::Feet
--
--
+ asInches(): Units::Inches
+ asFeet(): Units::Feet
+ getValue(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>150</x>
      <y>552</y>
      <w>102</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>18;18;90;48</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>108</x>
      <y>498</y>
      <w>126</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
Utils::Distance
--
value: float
--
/+ set(value: Units::Distance&amp;)/
/+ asInches(): Units::Inches/
/+ asFeet(): Units::Feet/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>78</x>
      <y>552</y>
      <w>102</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>90;18;18;48</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>30</x>
      <y>600</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Utils::Inches
--
--
+ asInches(): Units::Inches
+ asFeet(): Units::Feet
+ getValue(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>354</x>
      <y>30</y>
      <w>234</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
Utils::NetServer
--
- m_isValid: bool
- m_fd: int
- m_portNo: unsigned short
--
+ start_server(void): bool
+ stop_server(void): bool
+ is_valid(void): bool
+ send(fd: int, buf: std::vector&lt;unsigned char&gt;): bool
+ send(fd: int, buf: const char*): bool
+ send(fd: int, data: const Utils::Packable&amp;): bool
/# receive(client: Client, buf: const char*, len: int): bool/
- do_recv(fd: int): bool
--
Responsibilities
Begin listening on a specified port for TCP
connections from clients. Implementing classes
decide on how to handle received data.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>618</x>
      <y>30</y>
      <w>282</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>Utils::SerialPeer
--
+ enum Speed;
+ enum Mode;
+ enum FlowControl;
+ enum BlockMode
+ struct Settings { speed: Speed; mode: Mode; flow: FlowControl; blocking: BlockMode }
- m_isValid: bool
- m_fd: int
- m_portName: std::string
--
+ send(buf: std::vector&lt;unsigned char&gt;): bool
+ send(buf: const char*): bool
+ send(data: const Utils::Packable&amp;): bool
+ recv(buf: std::vector&lt;unsigned char&gt;&amp;): bool
+ recv(data: Utils::Packable&amp;): bool
--
Responsibilities
Open a UART serial connection in raw mode
with the specified settings. Send and receive
data over the connection.</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
