<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <zoom_level>6</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>48</x>
      <y>264</y>
      <w>240</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>LineAnalysis::Line
--
- length: int
- width: int
- color: Utils::Color
- angle: Utils::Degrees
- endPoints: LineAnalysys::Segment
- containingImage: Utils::Image&amp;
- time: Utils::TimeStamp
--
+ getLength(void): int
+ getWidth(void): int
+ getColor(void): Utils::Color
+ getAngle(void): Utils::Angle
+ getEndPoints(void): LineAnalysis::Segment
+ getImageRef(void): Utils::Image&amp;
+ getTime(void): Utils::TimeStamp&amp;
--
Responsibilities
Represent an oriented line segment in an image.
Immutable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>48</x>
      <y>486</y>
      <w>240</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>LineAnalysis::Segment
--
- pointLow: Utils::Point2&lt;int&gt;
- pointHigh: Utils::Point2&lt;int&gt;
--
+ getLowPoint(void): Point2&lt;int&gt;
+ getHighPoint(void): Point2&lt;int&gt;
--
Responsibilities
Represents a line segment. Immutable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>372</x>
      <y>36</y>
      <w>330</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>LineAnalysis::LineDetector
--
- colors: std::vector&lt;Utils::Color&gt;
- lines: std::vector&lt;std::shared_ptr&lt;LineAnalysis::Line&gt; &gt;
- image: LineAnalysis::ColorImage
--
+ setImage(image: Utils::ColorImage&amp;): void
+ setColors(colorList: const std::vector&lt;Utils::Color&gt;&amp;): void
+ addColor(Utils::Color color): void
+ getLines(lineList: std::vector&lt;std::shared_ptr&lt;LineAnalysis::Line&gt; &gt;&amp;): void
--
Responsibilities
For a given 24-bit RGB bitmap,
find lines which are close to the
specified colors.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>150</x>
      <y>156</y>
      <w>258</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m2=0..*
</panel_attributes>
    <additional_attributes>246;18;18;108</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>144</x>
      <y>438</y>
      <w>30</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m2=1
</panel_attributes>
    <additional_attributes>18;18;18;48</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>306</x>
      <y>360</y>
      <w>486</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>LineAnalysis::ImageFilter
--
--
_+ getFilteredImage(image: Utils::ColorImage&amp;, targetColor: Utils::Color, noiseReduction: bool=false): Utils::BWImage*_
--
Responsibilities
Takes a color image and optionally does a noise reduction
follwed by a color filter, and then edge detection. The resulting
BWImage is non-zero where an edge was found and 0 where an edge was
not found.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>480</x>
      <y>156</y>
      <w>132</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>120;204;18;18</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>654</x>
      <y>216</y>
      <w>258</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>LineAnalysis::ConvertToHeight
--
- param1: float
- param2: float
- param3: float
--
_+ getInstance(p1: float, p2: float, p3: float): ConvertToHeight_
+ setConversionParameters(p1: float, p2: float, p3: float): void
+ getHeightForWidth(widthPx: int): Units::Inches
--
Responsibilities
Represent a Black and White image.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>570</x>
      <y>156</y>
      <w>222</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>210;60;18;18</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>330</x>
      <y>534</y>
      <w>438</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Camera::DetectLines
--
- globalLineQueue: std::queue&lt;std::vector&lt;std::shared_ptr&lt;LineAnalysis::Line&gt; &gt; &gt;&amp;
--
+ exec(frame: Utils::Image&amp;): void
+ setAnalysisOutput(queue: std::queue&lt;std::vector&lt;std::shared_ptr&lt;LineAnalysis::Line&gt; &gt; &gt;&amp;): void
--
Responsibilities
Find all of the lines in a frame and place them in the specified output queue.</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
